
logging.level.root=info
logging.level.com.exam=info

logging.level.org.springframework=info

server.port=8090
server.servlet.context-path=/app

# MySQL 연동
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/final
spring.datasource.username=root
spring.datasource.password=1234

#################################################################
# JPA
# JPA가 자동으로 생성하는 SQL을 확인할 지 설정
logging.level.org.hibernate.SQL=trace
# SQL을 보기 좋게 출력. false: 한 줄로 출력
spring.jpa.properties.hibernate.format_sql=true
logging.level.org.hibernate.type=info

# 자동으로 테이블 생성. ddl-auto=create: drop 후 create
# @Entity로 지정된 클래스에 해당하는 테이블을 생성
spring.jpa.hibernate.ddl-auto=none
# 자동으로 생성된 SQL문에서 사용되는 파라미터를 출력
logging.level.org.hibernate.orm.jdbc.bind=trace
# connection을 사용한 후 pool에 반환하는지 여부(true: 반환 안 함)
spring.jpa.open-in-view=false

# 더 낮은 버전의 JPA에서 사용했던 설정. MySQL용 SQL문을 생성하도록 지정
#spring.jpa.database-platform=org.hibernate.dialect.MySQLDialect

# data.sql을 실행하기 위한 설정
spring.sql.init.mode=always

# @Entity 보다 먼저 data.sql이 실행되기 때문에 defer 시킴.
spring.jpa.defer-datasource-initialization=true

spring.jpa.hibernate.naming.implicit-strategy=org.hibernate.boot.model.naming.ImplicitNamingStrategyLegacyJpaImpl
spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl


################################################################
spring.mvc.pathmatch.matching-strategy=ant-path-matcher
spring.mvc.format.date=yyyy-MM-dd

# spring security 계정 정보 설정
spring.security.user.name=user
spring.security.user.password=1234
